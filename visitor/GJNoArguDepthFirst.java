//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst implements GJNoArguVisitor {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	//HashMap<String,Integer> h1=new HashMap<>();
	//HashMap<String,Boolean> h2=new HashMap<>();
	EnvironmentClass Ev =new EnvironmentClass();
   public Rclass1 visit(NodeList n) {
      Rclass1 _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public Rclass1 visit(NodeListOptional n) {
      if ( n.present() ) {
         Rclass1 _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public Rclass1 visit(NodeOptional n) {
      if ( n.present() )
         return (Rclass1)n.node.accept(this);
      else
         return null;
   }

   public Rclass1 visit(NodeSequence n) {
      Rclass1 _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public Rclass1 visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( Line() )*
    * f1 -> <EOF>
    */
   public Rclass1 visit(Goal n) {
      Rclass1 _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Expression()
    */
   public Rclass1 visit(Line n) {
      Rclass1 _ret=new Rclass1();
      _ret=(Rclass1)n.f0.accept(this);
      if(_ret==null) {
    	  return null;
      }
      if(_ret.getCateg()=="int")
      {
    	  System.out.println(_ret.getInteger1());
      }
      else if(_ret.getCateg()=="bool")
      {
    	  if(_ret.getB1()==true)
    		  System.out.println("#t");
    	  else
    		  System.out.println("#f");
    		  
      }
      else if(_ret.getCateg()=="idfr")
      {
    	  //System.out.println(_ret.getInteger1());
    	  String s1 = _ret.getStr1();
    	  if(Ev.h1.get(s1) == null)
    	  {
    		  System.out.println("Symbol \'"+ s1 + "\' not found in the environment.");
    	  }
    	  else
    		  System.out.println(Ev.h1.get(s1).getInteger1());
      }
      else
      {
    	  return null;
      }
     
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | BeginExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | MultiplyExpression()
    *       | DivideExpression()
    *       | GTExpression()
    *       | LTExpression()
    *       | EQExpression()
    *       | IfExpression()
    *       | DefineExpression()
    *       | Assignment()
    *       | ProcedureExp()
    *       | Application()
    */
   public Rclass1 visit(Expression n) {
      Rclass1 _ret=new Rclass1();
      _ret=(Rclass1)n.f0.accept(this);
      //System.out.println(_ret.integer1);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public Rclass1 visit(IntegerLiteral n) {
      Rclass1 _ret=new Rclass1();
      n.f0.accept(this);
      
      _ret.setInteger1(Integer.parseInt(n.f0.tokenImage));
      String type1="int";
      _ret.setCateg(type1);
      return _ret;
   }

   /**
    * f0 -> "#t"
    */
   public Rclass1 visit(TrueLiteral n) {
	  Rclass1 _ret=new Rclass1();
	  n.f0.accept(this);
      String s1=n.f0.tokenImage;
      if((s1=="#t")||(s1=="#true")) {
    	  _ret.setB1(true);
    	  String type1="bool";
          _ret.setCateg(type1);
      }
      else
      {
    	  System.out.println("read-syntax: bad syntax "+s1);
    	  return null;
      }
      return _ret;
   }

   /**
    * f0 -> "#f"
    */
   public Rclass1 visit(FalseLiteral n) {
	  Rclass1 _ret=new Rclass1();
	  n.f0.accept(this);
      String s1=n.f0.tokenImage;
      if((s1=="#f")||(s1=="#false")) 
      {
    	  _ret.setB1(false);
    	  String type1="bool";
          _ret.setCateg(type1);
      }
      else
    	  System.out.println("read-syntax: bad syntax "+s1);
      
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "begin"
    * f2 -> ( Expression() )*
    * f3 -> ")"
    */
   public Rclass1 visit(BeginExpression n) {
      Rclass1 _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "+"
    * f2 -> Expression()
    * f3 -> Expression()
    * f4 -> ")"
    */
   public Rclass1 visit(PlusExpression n) {
      Rclass1 _ret=new Rclass1();
      int num1=0;
      int num2=0;
      
      n.f0.accept(this);
      n.f1.accept(this);
      _ret=(Rclass1)n.f2.accept(this);
      if(_ret.getCateg() == "bool")
      {
    	  System.out.println("Expected number, can't be boolean");
    	  System.exit(0);
      }
      else if(_ret.getCateg()=="int")
      {
    	  num1=_ret.getInteger1();
      }
      else              // identifier
      {
    	  String s1 = _ret.getStr1();
    	  if(Ev.h1.containsKey(s1))
    	  {
    		  if(Ev.h1.get(s1).getCateg()=="int")
    			  num1=Ev.h1.get(s1).getInteger1();
    		  if(Ev.h1.get(s1).getCateg()=="bool")
    		  {
    			  System.out.println("Expected number, can't be boolean");
    	    	  System.exit(0);
    		  }
    	  }
    	  else 
    		  return _ret;
    	  
      }
      
      _ret=(Rclass1)n.f3.accept(this);
      if(_ret.getCateg() == "bool")
      {
    	  System.out.println("Expected number, can't be boolean");
    	  System.exit(0);
      }
      else if(_ret.getCateg()=="int")
      {
    	  num2=_ret.getInteger1();
      }
      else
      {
    	  String s1 = _ret.getStr1();
    	  if(Ev.h1.containsKey(s1))
    	  {
    		  if(Ev.h1.get(s1).getCateg()=="int")
    			  num2=Ev.h1.get(s1).getInteger1();
    		  if(Ev.h1.get(s1).getCateg()=="bool")
    		  {
    			  System.out.println("Expected number, can't be boolean");
    	    	  System.exit(0);
    		  }
    	  }
    	  else 
    		  return _ret;
      }
      int res=(num1+num2);
      _ret.setInteger1(res);
      _ret.setCateg("int");
      
      //System.out.println(res);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "-"
    * f2 -> Expression()
    * f3 -> Expression()
    * f4 -> ")"
    */
   public Rclass1 visit(MinusExpression n) {
	   Rclass1 _ret=new Rclass1();
	      int num1=0;
	      int num2=0;
	      
	      n.f0.accept(this);
	      n.f1.accept(this);
	      _ret=(Rclass1)n.f2.accept(this);
	      if(_ret.getCateg() == "bool")
	      {
	    	  System.out.println("Expected number, can't be boolean");
	    	  System.exit(0);
	      }
	      else if(_ret.getCateg()=="int")
	      {
	    	  num1=_ret.getInteger1();
	      }
	      else              // identifier
	      {
	    	  String s1 = _ret.getStr1();
	    	  if(Ev.h1.containsKey(s1))
	    	  {
	    		  if(Ev.h1.get(s1).getCateg()=="int")
	    			  num1=Ev.h1.get(s1).getInteger1();
	    		  if(Ev.h1.get(s1).getCateg()=="bool")
	    		  {
	    			  System.out.println("Expected number, can't be boolean");
	    	    	  System.exit(0);
	    		  }
	    	  }
	    	  else 
	    		  return _ret;
	    	  
	      }
	      
	      _ret=(Rclass1)n.f3.accept(this);
	      if(_ret.getCateg() == "bool")
	      {
	    	  System.out.println("Expected number, can't be boolean");
	    	  System.exit(0);
	      }
	      else if(_ret.getCateg()=="int")
	      {
	    	  num2=_ret.getInteger1();
	      }
	      else
	      {
	    	  String s1 = _ret.getStr1();
	    	  if(Ev.h1.containsKey(s1))
	    	  {
	    		  if(Ev.h1.get(s1).getCateg()=="int")
	    			  num2=Ev.h1.get(s1).getInteger1();
	    		  if(Ev.h1.get(s1).getCateg()=="bool")
	    		  {
	    			  System.out.println("Expected number, can't be boolean");
	    	    	  System.exit(0);
	    		  }
	    	  }
	    	  else 
	    		  return _ret;
	      }
	      int res=(num1-num2);
	      _ret.setInteger1(res);
	      _ret.setCateg("int");
	      
	      //System.out.println(res);
	      n.f4.accept(this);
	      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "*"
    * f2 -> Expression()
    * f3 -> Expression()
    * f4 -> ")"
    */
   public Rclass1 visit(MultiplyExpression n) {
	   Rclass1 _ret=new Rclass1();
	      int num1=0;
	      int num2=0;
	      
	      n.f0.accept(this);
	      n.f1.accept(this);
	      _ret=(Rclass1)n.f2.accept(this);
	      if(_ret.getCateg() == "bool")
	      {
	    	  System.out.println("Expected number, can't be boolean");
	    	  System.exit(0);
	      }
	      else if(_ret.getCateg()=="int")
	      {
	    	  num1=_ret.getInteger1();
	      }
	      else              // identifier
	      {
	    	  String s1 = _ret.getStr1();
	    	  if(Ev.h1.containsKey(s1))
	    	  {
	    		  if(Ev.h1.get(s1).getCateg()=="int")
	    			  num1=Ev.h1.get(s1).getInteger1();
	    		  if(Ev.h1.get(s1).getCateg()=="bool")
	    		  {
	    			  System.out.println("Expected number, can't be boolean");
	    	    	  System.exit(0);
	    		  }
	    	  }
	    	  else 
	    		  return _ret;
	    	  
	      }
	      
	      _ret=(Rclass1)n.f3.accept(this);
	      if(_ret.getCateg() == "bool")
	      {
	    	  System.out.println("Expected number, can't be boolean");
	    	  System.exit(0);
	      }
	      else if(_ret.getCateg()=="int")
	      {
	    	  num2=_ret.getInteger1();
	      }
	      else
	      {
	    	  String s1 = _ret.getStr1();
	    	  if(Ev.h1.containsKey(s1))
	    	  {
	    		  if(Ev.h1.get(s1).getCateg()=="int")
	    			  num2=Ev.h1.get(s1).getInteger1();
	    		  if(Ev.h1.get(s1).getCateg()=="bool")
	    		  {
	    			  System.out.println("Expected number, can't be boolean");
	    	    	  System.exit(0);
	    		  }
	    	  }
	    	  else 
	    		  return _ret;
	      }
	      int res=(num1*num2);
	      _ret.setInteger1(res);
	      _ret.setCateg("int");
	      
	      //System.out.println(res);
	      n.f4.accept(this);
	      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "/"
    * f2 -> Expression()
    * f3 -> Expression()
    * f4 -> ")"
    */
   public Rclass1 visit(DivideExpression n) {
	   Rclass1 _ret=new Rclass1();
	      int num1=0;
	      int num2=0;
	      
	      n.f0.accept(this);
	      n.f1.accept(this);
	      _ret=(Rclass1)n.f2.accept(this);
	      if(_ret.getCateg() == "bool")
	      {
	    	  System.out.println("Expected number, can't be boolean");
	    	  System.exit(0);
	      }
	      else if(_ret.getCateg()=="int")
	      {
	    	  num1=_ret.getInteger1();
	      }
	      else              // identifier
	      {
	    	  String s1 = _ret.getStr1();
	    	  if(Ev.h1.containsKey(s1))
	    	  {
	    		  if(Ev.h1.get(s1).getCateg()=="int")
	    			  num1=Ev.h1.get(s1).getInteger1();
	    		  if(Ev.h1.get(s1).getCateg()=="bool")
	    		  {
	    			  System.out.println("Expected number, can't be boolean");
	    	    	  System.exit(0);
	    		  }
	    	  }
	    	  else 
	    		  return _ret;
	    	  
	      }
	      
	      _ret=(Rclass1)n.f3.accept(this);
	      if(_ret.getCateg() == "bool")
	      {
	    	  System.out.println("Expected number, can't be boolean");
	    	  System.exit(0);
	      }
	      else if(_ret.getCateg()=="int")
	      {
	    	  num2=_ret.getInteger1();
	      }
	      else
	      {
	    	  String s1 = _ret.getStr1();
	    	  if(Ev.h1.containsKey(s1))
	    	  {
	    		  if(Ev.h1.get(s1).getCateg()=="int")
	    			  num2=Ev.h1.get(s1).getInteger1();
	    		  if(Ev.h1.get(s1).getCateg()=="bool")
	    		  {
	    			  System.out.println("Expected number, can't be boolean");
	    	    	  System.exit(0);
	    		  }
	    	  }
	    	  else 
	    		  return _ret;
	      }
	      if(num2!=0)
	      {
	    	  int res=(num1/num2);
		      _ret.setInteger1(res);
		      _ret.setCateg("int");
	      }
	      else 
	      {
	    	  System.out.println("/: division by zero");
	    	  System.exit(0);
	    	  
	      }  
	      n.f4.accept(this);
	      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> ">"
    * f2 -> Expression()
    * f3 -> Expression()
    * f4 -> ")"
    */
   public Rclass1 visit(GTExpression n) {
	   Rclass1 _ret=new Rclass1();
	      int num1=0;
	      int num2=0;
	      
	      n.f0.accept(this);
	      n.f1.accept(this);
	      _ret=(Rclass1)n.f2.accept(this);
	      if(_ret.getCateg() == "bool")
	      {
	    	  System.out.println("Expected number, can't be boolean");
	    	  System.exit(0);
	      }
	      else if(_ret.getCateg()=="int")
	      {
	    	  num1=_ret.getInteger1();
	      }
	      else              // identifier
	      {
	    	  String s1 = _ret.getStr1();
	    	  if(Ev.h1.containsKey(s1))
	    	  {
	    		  if(Ev.h1.get(s1).getCateg()=="int")
	    			  num1=Ev.h1.get(s1).getInteger1();
	    		  if(Ev.h1.get(s1).getCateg()=="bool")
	    		  {
	    			  System.out.println("Expected number, can't be boolean");
	    	    	  System.exit(0);
	    		  }
	    	  }
	    	  else 
	    		  return _ret;
	    	  
	      }
	      
	      _ret=(Rclass1)n.f3.accept(this);
	      if(_ret.getCateg() == "bool")
	      {
	    	  System.out.println("Expected number, can't be boolean");
	    	  System.exit(0);
	      }
	      else if(_ret.getCateg()=="int")
	      {
	    	  num2=_ret.getInteger1();
	      }
	      else
	      {
	    	  String s1 = _ret.getStr1();
	    	  if(Ev.h1.containsKey(s1))
	    	  {
	    		  if(Ev.h1.get(s1).getCateg()=="int")
	    			  num2=Ev.h1.get(s1).getInteger1();
	    		  if(Ev.h1.get(s1).getCateg()=="bool")
	    		  {
	    			  System.out.println("Expected number, can't be boolean");
	    	    	  System.exit(0);
	    		  }
	    	  }
	    	  else 
	    		  return _ret;
	      }
	      if(num1>num2)
	      {
		      //System.out.println("#t");
		      _ret.setB1(true);
	    	  String type1="bool";
	          _ret.setCateg(type1);
	      }
	      else
	      {
	    	  //System.out.println("#f");
		      _ret.setB1(false);
	    	  String type1="bool";
	          _ret.setCateg(type1);
	      }
	      
	      n.f4.accept(this);
	      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "<"
    * f2 -> Expression()
    * f3 -> Expression()
    * f4 -> ")"
    */
   public Rclass1 visit(LTExpression n) {
	   Rclass1 _ret=new Rclass1();
	      int num1=0;
	      int num2=0;
	      
	      n.f0.accept(this);
	      n.f1.accept(this);
	      _ret=(Rclass1)n.f2.accept(this);
	      if(_ret.getCateg() == "bool")
	      {
	    	  System.out.println("Expected number, can't be boolean");
	    	  System.exit(0);
	      }
	      else if(_ret.getCateg()=="int")
	      {
	    	  num1=_ret.getInteger1();
	      }
	      else              // identifier
	      {
	    	  String s1 = _ret.getStr1();
	    	  if(Ev.h1.containsKey(s1))
	    	  {
	    		  if(Ev.h1.get(s1).getCateg()=="int")
	    			  num1=Ev.h1.get(s1).getInteger1();
	    		  if(Ev.h1.get(s1).getCateg()=="bool")
	    		  {
	    			  System.out.println("Expected number, can't be boolean");
	    	    	  System.exit(0);
	    		  }
	    	  }
	    	  else 
	    		  return _ret;
	    	  
	      }
	      
	      _ret=(Rclass1)n.f3.accept(this);
	      if(_ret.getCateg() == "bool")
	      {
	    	  System.out.println("Expected number, can't be boolean");
	    	  System.exit(0);
	      }
	      else if(_ret.getCateg()=="int")
	      {
	    	  num2=_ret.getInteger1();
	      }
	      else
	      {
	    	  String s1 = _ret.getStr1();
	    	  if(Ev.h1.containsKey(s1))
	    	  {
	    		  if(Ev.h1.get(s1).getCateg()=="int")
	    			  num2=Ev.h1.get(s1).getInteger1();
	    		  if(Ev.h1.get(s1).getCateg()=="bool")
	    		  {
	    			  System.out.println("Expected number, can't be boolean");
	    	    	  System.exit(0);
	    		  }
	    	  }
	    	  else 
	    		  return _ret;
	      }
	      if(num1<num2)
	      {
		      //System.out.println("#t");
		      _ret.setB1(true);
	    	  String type1="bool";
	          _ret.setCateg(type1);
	      }
	      else
	      {
	    	  //System.out.println("#f");
		      _ret.setB1(false);
	    	  String type1="bool";
	          _ret.setCateg(type1);
	      }
	      
	      n.f4.accept(this);
	      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> Expression()
    * f4 -> ")"
    */
   public Rclass1 visit(EQExpression n) {
	   Rclass1 _ret=new Rclass1();
	      int num1=0;
	      int num2=0;
	      
	      n.f0.accept(this);
	      n.f1.accept(this);
	      _ret=(Rclass1)n.f2.accept(this);
	      if(_ret.getCateg() == "bool")
	      {
	    	  System.out.println("Expected number, can't be boolean");
	    	  System.exit(0);
	      }
	      else if(_ret.getCateg()=="int")
	      {
	    	  num1=_ret.getInteger1();
	      }
	      else              // identifier
	      {
	    	  String s1 = _ret.getStr1();
	    	  if(Ev.h1.containsKey(s1))
	    	  {
	    		  if(Ev.h1.get(s1).getCateg()=="int")
	    			  num1=Ev.h1.get(s1).getInteger1();
	    		  if(Ev.h1.get(s1).getCateg()=="bool")
	    		  {
	    			  System.out.println("Expected number, can't be boolean");
	    	    	  System.exit(0);
	    		  }
	    	  }
	    	  else 
	    		  return _ret;
	    	  
	      }
	      
	      _ret=(Rclass1)n.f3.accept(this);
	      if(_ret.getCateg() == "bool")
	      {
	    	  System.out.println("Expected number, can't be boolean");
	    	  System.exit(0);
	      }
	      else if(_ret.getCateg()=="int")
	      {
	    	  num2=_ret.getInteger1();
	      }
	      else
	      {
	    	  String s1 = _ret.getStr1();
	    	  if(Ev.h1.containsKey(s1))
	    	  {
	    		  if(Ev.h1.get(s1).getCateg()=="int")
	    			  num2=Ev.h1.get(s1).getInteger1();
	    		  if(Ev.h1.get(s1).getCateg()=="bool")
	    		  {
	    			  System.out.println("Expected number, can't be boolean");
	    	    	  System.exit(0);
	    		  }
	    	  }
	    	  else 
	    		  return _ret;
	      }
	      if(num1==num2)
	      {
		      //System.out.println("#t");
		      _ret.setB1(true);
	    	  String type1="bool";
	          _ret.setCateg(type1);
	      }
	      else
	      {
	    	  //System.out.println("#f");
		      _ret.setB1(false);
	    	  String type1="bool";
	          _ret.setCateg(type1);
	      }
	      
	      n.f4.accept(this);
	      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "if"
    * f2 -> Expression()
    * f3 -> Expression()
    * f4 -> Expression()
    * f5 -> ")"
    */
   public Rclass1 visit(IfExpression n) {
      Rclass1 _ret=new Rclass1();
      n.f0.accept(this); // '('
      n.f1.accept(this); //  "if"
      boolean cond;
      _ret=(Rclass1)n.f2.accept(this);
      //if(_ret==null)return null;
      if(_ret.getCateg()=="bool")
      {
    	  cond=_ret.getB1();
    	  if(cond==true) {
        	  _ret=(Rclass1)n.f3.accept(this);
        	  n.f5.accept(this);
        	  //if(_ret==null)return null;
              
          }
          else
          {
        	  _ret=(Rclass1)n.f4.accept(this);
        	  n.f5.accept(this);
        	  //if(_ret==null)return null;
          }
      }
      
      return _ret;
      
   }

   /**
    * f0 -> "("
    * f1 -> "define"
    * f2 -> Identifier()
    * f3 -> Expression()
    * f4 -> ")"
    */
   public Rclass1 visit(DefineExpression n) {
	  String k1;
      Rclass1 _ret=new Rclass1();
      
      n.f0.accept(this);
      n.f1.accept(this);
      _ret=(Rclass1)n.f2.accept(this);
      k1=_ret.getStr1();
      _ret=(Rclass1)n.f3.accept(this);
       Ev.h1.put(k1, _ret);
  
      n.f4.accept(this);
      
      return null;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public Rclass1 visit(Identifier n) {
      Rclass1 _ret=new Rclass1();
      n.f0.accept(this);
      _ret.setStr1(n.f0.tokenImage);
      _ret.setCateg("idfr");
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "set!"
    * f2 -> Identifier()
    * f3 -> Expression()
    * f4 -> ")"
    */
   public Rclass1 visit(Assignment n) {
      Rclass1 _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "lambda"
    * f2 -> "("
    * f3 -> ( Identifier() )*
    * f4 -> ")"
    * f5 -> Expression()
    * f6 -> ")"
    */
   public Rclass1 visit(ProcedureExp n) {
      Rclass1 _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ( Expression() )*
    * f3 -> ")"
    */
   public Rclass1 visit(Application n) {
      Rclass1 _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

}
